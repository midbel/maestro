.VERSION = "0.1.1"
.DEFAULT = build
.ALL     = test build
.HELP    = <<HELP
simple is a sample maestro file that can be used for any Go project.
It provides commands to automatize building, checking and testing
your Go project.

It has also some commands to give statistics on the status of the
project such as number of remaining todos, line of codes and others.
HELP

maestro = maestro
tish    = tish
bindir  = bin
cover   = "cover.out"

buildoptions = "-v" "-trimpath"

test(
	short = "run test in current directory",
	tag   = build test,
): {
	@go clean -testcache
	@go test -v -coverprofile ${cover} .
	#go tool cover -html ${cover}
}

build(
	short = "build binaries",
	tag   = build,
): {
	rm -f ${bindir,,}/${maestro,,}
	rm -f ${bindir,,}/${tish,,}

	echo "build ${maestro,,} in ${bindir,,}/${maestro,,}"
	go build ${buildoptions} -o ${bindir,,}/${maestro,,} cmd/${maestro,,}/main.go

	echo "build ${tish,,} in ${bindir,,}/${tish,,}"
	go build ${buildoptions} -o ${bindir,,}/${tish,,} cmd/${tish,,}/main.go
}

verify(
	short = "verify code",
	tag   = "build" "verify",
): {
	@-go vet github.com/midbel/maestro
	@-go vet github.com/midbel/maestro/shell
}

commit(
	short = "commit changes and push to remote",
	tag   = build,
): {
	gofmt -w -s .
	git commit -am $1
	git push
}

loc(
	short = "count number of LoC",
	tag   = "info" "verify",
): {
	find -type f -name "*go" -exec cat {} \; | egrep -v '^$' | wc -l
}

todo(
	short = "count number of remaining todos in code",
	tag   = "info" "verify",
): {
	find -type f -name "*go" -exec cat {} \; | grep 'TODO' | wc -l
}

count(
	short = "count LOC and todos",
	tag   = "info" "verify",
): {
	echo "line of codes:"
	<loc
	echo "remaining todos:"
	<todo
}

combine(
	short = "combine test and build",
	tag   = build,
): {
	@echo ">> run tests"
	<test
	@echo ">> run build"
	<build
}

parseargs(
	short = "demo command with custom option",
	tag   = "demo",
	args  = foo bar,
	options = (
		short   = a,
		long    = all,
		flag    = true,
		help    = "do all the thing that need to be done",
	), (
		short   = b,
		long    = "bind",
		required = true,
		help     = "bind to given address before performing task",
	)
): {
	echo $0
	echo "arguments: $@"
	echo "bind(short): $b, bind(long): $bind"
	echo "all(short): $a, all(long): $all"
}
