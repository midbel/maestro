# comment should be on their own line
# a comment on the same line of a, eg, declaration is not allowed


# maestro all
.ALL     = reload config1 config2
# default action when no arguments is given to maestro
.DEFAULT = single

# defines version, usage, about and help of this maestro file
.HELP    = help
.USAGE   = "sample.mf <action...>"
.ABOUT   = "how to use sample maestro file"
.VERSION = "sample.mf 0.0.1"

# special actions called at the beginning of the execution and at the end
.BEGIN = sleep
.END   = sleep
# special action called at the end of an action depending of its result
# .SUCCESS = multiline
# .FAILURE = multiline

# number of dependencies that can be run in parallel:
# -: disable parallel
# 0: no limit
# X: max X dependencies can be run in parallel
.PARALLEL = 10

.SHELL = bash

# other variables
# .BIN  =       # directory where script will be written after variable subsitution
# .ECHO =       # tell maestro to echo commands/scripts executed
# .TIMEOUT =    # timeout to give to each executed commands
# .NOCONFLICT = # behaviour of maestro when multiple commands have the same name


# variables declaration
datadir = /var/data
cachedir = /var/data/cache
tmpdir  = /var/tmp
welcom  = "hello world"
mode    = 644
env     = prod dev test

# - delete the values of a variable without removing it
env = -

# assign value of variables to new variables
workdir = %(datadir)
dirs    = %(datadir) %(tmpdir) %(workdir)

# declare add new variables in scope without assigning any values
declare hello world

# include variables/actions from other files
# syntax 1
# include tmp/globals.mf
# include "tmp/variables.mf"
# syntax 2
# include (
# 	"etc/maestro/globals.mf"
# 	"etc/maestro/variables.mf"
# )

# declare variables that will be available in environment of executed commands
export PATH /var/bin
export HOME %(datadir)

# actions
# =======
#
# syntax
# ------
# identifier[(properties)]: [dependencies]
# 	[script]

# action properties
# -----------------
# shell:    shell used to execute commands of the script
# help:     short help message
# desc:     help of action
# env:      include environment variables set via export command
# ignore:   ignore errors of commands if any
# retry:    re execute commands X times if it fails
# delay:    wait X seconds before executing script
# timeout:  kill scripts X seconds after having executed script
# workdir:  set working directory of script
# tag:      list of tags for an action (help to classify actions)
# stdout:   specify standard output of command
# stderr:   specify standard error of command
# ...:     TBD

# action dependencies
# -------------------
# space separated list of actions
# list actions that should be executed before the action itself
#
# dependencies are by default executed in parallel. to disable
# parallel, set the meta .PARALLEL to -1 or "-". to limit the number
# the number of process running in parallel set the appropriate values
# to .PARALLEL. 0 means unlimited number of process.
#
# actions script
# --------------
# each command of a script must start with at least one:
# - space
# - tab
#
# blank lines are allowed between command of script
# commands on multiple lines are one and only one "script",
# same as they were written in an unique file.sh
# variables defined in maestro file will be replace by their values
#
# action options+arguments
# ------------------------
# each action can be specified its own set of options and arguments
# syntax: probably via action properties TBC
# each action has a default set of options. these options allow to overwrite
# properties set (or not) to action
# eg: maestro action -shell bash -workdir $PWD -retry 0 <arg0> <arg1>
# remaining arguments of the command line are available from their index (0 based)
# there are two specials variables added:
# @: list of arguments (separated by space)
# #: number of arguments
#
# empty actions:
# --------------
# name: dep dep
# name: dep dep\n\t
# name:\n\t
# name:

# action: possible features (not/never implemented)
# -------------------------
# connecting stdout/stderr of an action to stdin of another in action dependencies
# eg:
# action: dep0 1> dep1 // redirect stdout of dep0 to stdin of dep1
# action: dep0 2> dep1 // redirect stderr of dep0 to stdin of dep1
# action: dep0 &> dep1 // redirect stdout/stderr of dep0 to stdin of dep1
# namespacing actions (new attempt)

single(
	shell="/bin/bash",
	help="echo single target",
	tag=dummy
):
	echo %(TARGET)

	echo %(TARGET) %(datadir)

multiline(help="echo multiple target and props", tag=dummy):
	echo %(TARGET) %(@)
	echo %(TARGET) %(#)

	echo %(TARGET) %(shell)

empty(help="do nothing"):
sleep(shell=bash): empty single
	sleep 5

reload(shell=bash,retry=5, help="reload service"):
	sudo service %(TARGET) reload

config1(
	shell=ksh,
	env=true,
	workdir=%(datadir),
	help="test configuration phase1",
	tag=config,
):
  sudo service %(TARGET) test

# same as config1 without the trailing comma after the home property
config2(
	shell=ksh,
	env=true,
	workdir=%(datadir),
	help="test configuration phase2",
	tag=config,
):
	sudo service %(TARGET) test

dummy = dummy

purge(tag=service, tag=hazardous, hazardous=true):
	rm -rf %(datadir)
	rm -rf %(cachedir)

test(tag=service): purge
	sudo service %(dummy) test

stop(tag=service):
	sudo service %(dummy) stop

start(tag=service): purge test
	sudo service %(dummy) start

restart(shell=bash, help="stop and start service"): stop start
	echo %(TARGET) "restarted"
