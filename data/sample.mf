.ALL     = reload config1 config2
.HELP    = help
.USAGE   = "sample.mf <action...>"
.ABOUT   = "how to use sample maestro file"
.DEFAULT = single
.ECHO    = on
.VERSION = "sample.mf 0.0.1"

# meta varialbe - to be implemented
# .TIMEOUT =
# .NOCONFLICT =

# comment should be skipped
datadir = /var/data
tmpdir  = /var/tmp
welcom  = "hello world"
mode    = 644

# assign datadir value to workdir
workdir = %(datadir)
env     = prod dev test
dirs    = %(datadir) %(tmpdir) %(workdir)

declare hello world

# syntax 1
include tmp/globals.mf
include "tmp/variables.mf"
# syntax 2 - to be implemented
# include (
# 	"etc/maestro/globals.mf"
# 	"etc/maestro/variables.mf"
# )

export PATH /var/bin
export HOME %(datadir)

# echo %(welcom)
# echo "data directory set" %(datadir)
# echo "working directory set" %(workdir)
desc = `
single is a standard action available in a maestro file.

it only prints on stdout the name of its target and then the values of some
its properties.

this help text is only there for the demo of multiline parsing of maestro.
`
single(
	shell="/bin/bash",
	help="echo single target",
	desc=%(desc)
):
  echo %(TARGET)

  echo %(TARGET) %(datadir)

multiline(help="echo multiple target and props"):
  echo %(TARGET) %(PROPS)
  echo %(TARGET) %(PROPS)

  echo %(TARGET) %(PROPS)

empty(help="do nothing"):
sleep(shell=bash): empty single
	sleep 5

reload(shell=bash,retry=5, help="reload service"):
  sudo service %(TARGET) reload

config1(
  shell=ksh,
  env=true,
  workdir=%(datadir),
	help="test configuration phase1",
):
  sudo service %(TARGET) test

# same as config1 without the trailing comma after the home property
config2(
  shell=ksh,
  env=true,
  workdir=%(datadir),
	help="test configuration phase2"
):
  sudo service %(TARGET) test

dummy = dummy

purge:
	sudo service %(dummy) purge

test: purge
	sudo service %(dummy) test

stop:
	sudo service %(dummy) stop

start: purge test
	sudo service %(dummy) start

restart(shell=bash, help="stop and start service"): stop start
  echo %(TARGET) "restarted"

# namespace
legacy {
	.USAGE = "legacy actions before regression"

	config = "etc/legacy.toml"
	dummy  = dummy

	startlegacy:
		sudo service %(dummy) start

	stoplegacy:
		sudo service %(dummy) stop
}
