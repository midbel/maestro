.VERSION = "0.1.1"
.DEFAULT = build
.ALL     = test verify build
.HELP    = <<HELP
simple is a sample maestro file that can be used for any Go project.
It provides commands to automatize building, checking and testing
your Go project.

It has also some commands to give statistics on the status of the
project such as number of remaining todos, line of codes and others.
HELP

maestro = maestro
tish    = tish
bindir  = bin
cover   = "cover.out"

package = "github.com/midbel/maestro"

test(
	short = "run test in current directory",
	tag   = build test,
): gofmt {
	@go clean -testcache
	.repeat($package, "$package/shlex", "$package/shell") {
		@go test -cover <var>
	}
}

deploy(
	short = "copy binaries in PATH",
	tag   = build deploy,
	alias = install,
): !build {
	cp ${bindir,,}/${maestro} /home/nico/go/bin
	cp ${bindir,,}/${tish} /home/nico/go/bin
}

build(
	short = "build the binaries of the project",
	tag   = build,
	alias = compile,
	hosts = "127.0.0.1:22",
): tidy, gofmt, test, verify {
	# build the maestro binary and the tish shell
	rm -f ${bindir,,}/${maestro,,}
	rm -f ${bindir,,}/${tish,,}

	buildoptions = "-v" "-trimpath"

	echo "build ${maestro,,} in ${bindir,,}/${maestro,,}"
	go build ${buildoptions} -o ${bindir,,}/${maestro,,} cmd/${maestro,,}/main.go

	echo "build ${tish,,} in ${bindir,,}/${tish,,}"
	go build ${buildoptions} -o ${bindir,,}/${tish,,} cmd/${tish,,}/main.go
}

verify(
	short = "verify code",
	tag   = build verify,
	alias = vet,
): gofmt {
	# run "go vet" on each package(s) in the project.
	echo "run vet on $package"
	@go vet $package
	echo "run vet on $package/shell"
	@go vet "$package/shell"
	echo "run vet on $package/shlex"
	@go vet "$package/shlex"
	echo "run vet on $package/wrap"
	@go vet "$package/wrap"
}

commit(
	short = "commit changes and push to remote",
	tag   = build,
	args  = message,
	options = (
		short = p,
		long  = push,
		flag  = true,
		help  = "push committed changes to remote repository",
	)
): gofmt {
	# commit changes in the project and optionally push them to the remote
	# repository.
	git commit -am $1
	$push && git push
}

%loc(
	short = "count number of LoC",
	tag   = info verify,
): {
	total = $(find -type f -name "*.go" -exec cat {} \; | egrep -v '^$' | wc -l)
	echo "${total:>:5} LoC"
}

.SSH_USER     = test
.SSH_PASSWORD = usertest

%gofmt {
	gofmt -w -s .
}

%tidy {
	go mod tidy
}

%todo(
	short = "count number of remaining todos in code",
	tag   = info verify,
	options = (
		short = s,
		long  = show,
		help  = "print the line with the todo",
		flag  = true,
	)
): {
	total = $(find -type f -name "*go" -exec cat {} \; | grep 'TODO' | wc -l)
	echo "${total:>:5} remaining todos"
	$show && grep 'TODO' *go shlex/*go shell/*go | cut -f 3 -d : | awk '{$1=$1};1'
}

count(
	short = "count LOC and todos",
	tag   = info verify,
): gofmt {
	# reports the number of lines and remaining todos in the project
	<loc
	<todo
}
