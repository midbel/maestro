.VERSION = "0.1.1"
.AUTHOR  = "midbel"
.EMAIL   = "no-reply@midbel.org"
.DEFAULT = build
.ALL     = test verify build
.HELP    = <<HELP
simple is a sample maestro file that can be used for any Go project.
It provides commands to automatize building, checking and testing \
your Go project.

It has also some commands to give statistics on the status of the \
project such as number of remaining todos, line of codes and others.
HELP

maestro = maestro
tish    = tish
bindir  = bin
cover   = "cover.out"

package = "github.com/midbel/maestro"

test(
	short = "run test in current directory",
	tag   = build test,
): format {
	go clean -testcache
	for var in $package "$package/shlex" "$package/shell" "$package/schedule"; do
		go test -v -cover $var
	done
}

deploy(
	short = "copy binaries in PATH",
	tag   = build deploy,
	alias = install,
	schedule = (
		time = 20/20 9-16 * * *,
	),
): ?build {
	cp ${bindir,,}/${maestro} /home/nico/go/bin
	cp ${bindir,,}/${tish} /home/nico/go/bin
}

build(
	short = "build the binaries of the project",
	tag   = build,
	alias = compile,
	hosts = "127.0.0.1:22",
	options = (
		short = c,
		long  = clean,
		flag  = true,
		help  = "run go clean before compiling binaries"
	),
	schedule = (
		time = */5 10-18 * * mon-fri,
	), (
		time = 10 23 * * sat;sun,
	)
): tidy, format, test, verify {
	# build the maestro binary and the tish shell

	rm -f ${bindir,,}/${maestro,,}
	rm -f ${bindir,,}/${tish,,}
	go clean -cache

	version = $(git tag | tail -n 1)
	build   = $(date -I)
	buildoptions = "-v" "-trimpath" "-ldflags" "-X main.CmdVersion=${version#v} -X main.CmdBuild=${build}"

	echo "build ${maestro,,} in ${bindir,,}/${maestro,,}"
	go build ${buildoptions} -o ${bindir,,}/${maestro,,} cmd/${maestro,,}/main.go

	echo "build ${tish,,} in ${bindir,,}/${tish,,}"
	go build ${buildoptions} -o ${bindir,,}/${tish,,} cmd/${tish,,}/main.go
}

verify(
	short = "verify code",
	tag   = build verify,
	alias = vet,
): format {
	# run "go vet" on each package(s) in the project.
	echo "run vet on $package"
	go vet $package
	echo "run vet on $package/shell"
	go vet "$package/shell"
	echo "run vet on $package/shlex"
	go vet "$package/shlex"
	echo "run vet on $package/schedule"
	go vet "$package/schedule"
}

commit(
	short = "commit changes and push to remote",
	tag   = build,
	args  = message,
	options = (
		short = p,
		long  = push,
		flag  = true,
		help  = "push committed changes to remote repository",
	)
): format {
	# commit changes in the project and optionally push them to the remote
	# repository.
	git commit -am $1
	$push && git push
}

%loc(
	short = "count number of LoC",
	tag   = info verify,
): {
	total = $(find -type f -name "*.go" -exec cat {} \; | egrep -v '^$' | wc -l)
	echo "${total:>:5} LoC"
}

.SSH_USER     = test
.SSH_PASSWORD = usertest

%goclean(
	short = "clean previous build",
	tag   = helper,
): {
	go clean -cache
}

%format {
	gofmt -w -s .
}

%tidy {
	go mod tidy
}

%todo(
	short = "count number of remaining todos in code",
	tag   = info verify,
	options = (
		short = s,
		long  = show,
		help  = "print the line with the todo",
		flag  = true
	)
): {
	total = $(find -type f -name "*go" -exec cat {} \; | grep 'TODO' | wc -l)
	echo "${total:>:5} remaining todos"
	$show && grep 'TODO' *go shlex/*go shell/*go | cut -f 3 -d : | awk '{$1=$1};1'
}

count(
	short = "count LOC and todos",
	tag   = info verify,
	schedule = (
		time = * * * * *,
		args = first second third
	),
): format {
	# reports the number of lines and remaining todos in the project
	loc
	todo
}

loop(short = loop, tag = loop): {
	for i in $(seq 1 10); do
		echo $i
	done
}
