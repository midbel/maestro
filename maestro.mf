.VERSION = "0.1.1"
.DEFAULT = build
.ALL     = test verify build
.HELP    = <<HELP
simple is a sample maestro file that can be used for any Go project.
It provides commands to automatize building, checking and testing
your Go project.

It has also some commands to give statistics on the status of the
project such as number of remaining todos, line of codes and others.
HELP

maestro = maestro
tish    = tish
bindir  = bin
cover   = "cover.out"

package = "github.com/midbel/maestro"

test(
	short = "run test in current directory",
	tag   = build test,
): gofmt {
	@go clean -testcache
	.repeat($package, "$package/shlex", "$package/shell") {
		@go test -cover <var>
	}
}

deploy(
	short = "copy binaries in PATH",
	tag   = build deploy,
	alias = install,
): !build {
	cp ${bindir,,}/${maestro} /home/nico/go/bin
	cp ${bindir,,}/${tish} /home/nico/go/bin
}

build(
	short = "build binaries",
	tag   = build,
	alias = compile,
	hosts = "127.0.0.1:22",
): tidy, gofmt, test, verify {
	rm -f ${bindir,,}/${maestro,,}
	rm -f ${bindir,,}/${tish,,}

	buildoptions = "-v" "-trimpath"

	echo "build ${maestro,,} in ${bindir,,}/${maestro,,}"
	go build ${buildoptions} -o ${bindir,,}/${maestro,,} cmd/${maestro,,}/main.go

	echo "build ${tish,,} in ${bindir,,}/${tish,,}"
	go build ${buildoptions} -o ${bindir,,}/${tish,,} cmd/${tish,,}/main.go
}

verify(
	short = "verify code",
	tag   = build verify,
	alias = vet,
): gofmt {
	echo "run vet on $package"
	@go vet $package
	echo "run vet on $package/shell"
	@go vet "$package/shell"
	echo "run vet on $package/shlex"
	@go vet "$package/shlex"
}

commit(
	short = "commit changes and push to remote",
	tag   = build,
	args  = message,
	options = (
		short = p,
		long  = push,
		flag  = true,
		help  = "push committed changes to remote repository",
	)
): gofmt {
	git commit -am $1
	$push && git push
}

%loc(
	short = "count number of LoC",
	tag   = info verify,
): {
	total = $(find -type f -name "*.go" -exec cat {} \; | egrep -v '^$' | wc -l)
	echo "${total:>:5} LoC"
}

%todo(
	short = "count number of remaining todos in code",
	tag   = info verify,
	options = (
		short = s,
		long  = show,
		help  = "print the line with the todo",
		flag  = true,
	)
): {
	total = $(find -type f -name "*go" -exec cat {} \; | grep 'TODO' | wc -l)
	echo "${total:>:5} remaining todos"
	$show && grep 'TODO' *go shlex/*go shell/*go | cut -f 3 -d : | awk '{$1=$1};1'
}

.SSH_USER     = test
.SSH_PASSWORD = usertest

count(
	short = "count LOC and todos",
	tag   = info verify,
): gofmt {
	<loc
	<todo
}

seq(
	short = "demo multiline for loop",
	tag   = "demo",
): {
	# this comment will become the help of the command.
	# multiple line can be used to give more information
	#
	# blank lines are allow in the command doc but will
	# be merged into a single blank line
	#
	# there is no need for the comment to give a full
	# description of the options and arguments because
	# they are automatically generated from the options
	# and the arguments properties of the command.
	#
	# the help property is kept and will be used if the
	# command has not this multiline help
	for id in {1..10..3}; do
		echo $id
	done
}

%gofmt {
	gofmt -w -s .
}

%tidy {
	go mod tidy
}
